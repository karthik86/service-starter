/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.2.3).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.thoughtworks.api.api;

import com.thoughtworks.api.api.model.Payment;
import com.thoughtworks.api.api.model.PaymentFailureResponse;
import com.thoughtworks.api.api.model.PaymentRequest;
import com.thoughtworks.api.api.model.PaymentSuccessResponse;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;

@Validated
@Api(value = "payments", description = "the payments API")
public interface PaymentsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /payments : Add a payment 
     * Make payemt between two users
     *
     * @param paymentRequest  (optional)
     * @return Invalid input or request body missing or incorrect format (status code 400)
     *         or Payment request is unprocessable (status code 422)
     *         or Payment created successfully (status code 201)
     *         or Info referred in request not found (status code 404)
     *         or Internal server error (status code 500)
     */
    @ApiOperation(value = "Add a payment ", nickname = "create1", notes = "Make payemt between two users", response = PaymentSuccessResponse.class, tags={ "PaymentDetails", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid input or request body missing or incorrect format", response = PaymentFailureResponse.class),
        @ApiResponse(code = 422, message = "Payment request is unprocessable", response = PaymentFailureResponse.class),
        @ApiResponse(code = 201, message = "Payment created successfully", response = PaymentSuccessResponse.class),
        @ApiResponse(code = 404, message = "Info referred in request not found", response = PaymentFailureResponse.class),
        @ApiResponse(code = 500, message = "Internal server error", response = PaymentFailureResponse.class) })
    @RequestMapping(value = "/payments",
        produces = { "*/*" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<PaymentSuccessResponse> create1(@ApiParam(value = ""  )  @Valid @RequestBody(required = false) PaymentRequest paymentRequest) throws Exception {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
                    String exampleString = "{ \"paymentId\" : 0, \"statusMessage\" : \"statusMessage\" }";
                    ApiUtil.setExampleResponse(request, "*/*", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.valueOf(201));

    }


    /**
     * GET /payments : Gets all payments 
     * Gets All Transactions done 
     *
     * @return Internal server error (status code 500)
     *         or Payment done successfully (status code 200)
     */
    @ApiOperation(value = "Gets all payments ", nickname = "getAllPayments", notes = "Gets All Transactions done ", response = Payment.class, responseContainer = "List", tags={ "PaymentDetails", })
    @ApiResponses(value = { 
        @ApiResponse(code = 500, message = "Internal server error", response = PaymentFailureResponse.class),
        @ApiResponse(code = 200, message = "Payment done successfully", response = Payment.class, responseContainer = "List") })
    @RequestMapping(value = "/payments",
        produces = { "*/*" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<Payment>> getAllPayments() throws Exception {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
                    String exampleString = "{ \"payeeName\" : \"payeeName\", \"amount\" : 6, \"payeeAccountNumber\" : 5, \"beneficiaryAccountNumber\" : 1, \"payeeIfscCode\" : \"payeeIfscCode\", \"beneficiaryName\" : \"beneficiaryName\", \"requestId\" : \"requestId\", \"id\" : 0, \"beneficiaryIfscCode\" : \"beneficiaryIfscCode\", \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "*/*", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.valueOf(200));

    }

}
